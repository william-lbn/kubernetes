<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on kubernetes二次开发指南</title>
    <link>https://william-lbn.github.io/kubernetes/</link>
    <description>Recent content in Introduction on kubernetes二次开发指南</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://william-lbn.github.io/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>4.1.1 容器化发展</title>
      <link>https://william-lbn.github.io/kubernetes/docs/%E7%AC%AC%E5%9B%9B%E7%AB%A0-kubernetes-kubelet%E5%BC%80%E5%8F%91/4.1-%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8E%A5%E5%8F%A3cri/%E5%AE%B9%E5%99%A8%E5%8C%96%E5%8F%91%E5%B1%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://william-lbn.github.io/kubernetes/docs/%E7%AC%AC%E5%9B%9B%E7%AB%A0-kubernetes-kubelet%E5%BC%80%E5%8F%91/4.1-%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8E%A5%E5%8F%A3cri/%E5%AE%B9%E5%99%A8%E5%8C%96%E5%8F%91%E5%B1%95/</guid>
      <description>container（容器）英文单词又叫集装箱；1956年4月26号，麦克莱恩发明集装箱，随后集装箱就开始极大地推动了全球化的协作浪潮，为更快、更便宜和更可靠的全球化运输铺平了道路，使得制造业的产业链条发生了翻天覆地的变化。
 在许多方面，与物理容器（集装箱）如何塑造航运一样，应用程序容器也在彻底改变软件的开发与运作。与物理容器相似，应用程序容器是数字包装的一种形式。他们依靠该属性为部署或运行使用相同操作系统 (OS) 或云的各种应用程序提供虚拟隔离。
 容器的最初想法要追溯到20世纪七十年代，那时计算机还是一种稀有商品，光是租一个，每月就要花费一千多美元，这让许多企业望而却步；那个年代的一千多美元相当于现在一万美元左右。为了应对这种情况，人们已经发明了多个计算机终端连接到一个中央大型机器，这样便可以在一台中心机器完成工作。集中式计算机使从一个位置控制所有任务成为可能，因此如果一个终端出现故障，用户只需转到另一个终端，在那里登录，仍然可以访问他们的所有文件。然而，这样确有一些缺点。例如，如果因某种原因或是有人蓄意造成中央计算机崩溃，系统会导致所有人都无法使用。像这样的问题表明，计算机不仅需要能够分离出单个用户，还需要能够分离出系统进程。
 为了隔离环境，1979年，贝尔实验室chroot(change root)系统调用程序正式引入Unix V7的开发过程中。它为每个进程提供一个独立的磁盘空间，将一个进程及其子进程的根目录拷贝到文件系统的新位置，让这些进程只能访问这些目录。但是令人感到惋惜的是Unix v7是贝尔实验室发布的最后一个免费版本，之后开始收回版权，进行商业化。也正是因为这个原因，Richard Matthew Stallman 在 1983 年发起 GUN（GNU&#39;s Not UNIX） 计划和自由软件运动。
 2000 年 3 月 4 日，FreeBSD 将 jail 命令引入其操作系统。虽然它类似于 chroot 命令，但它还包括用于隔离文件系统、用户、网络等的附加进程沙盒功能。在进程来看，跟实际的操作系统几乎是一样的，对进程来说就像被关进了监狱，这也是jail名称的由来。FreeBSD jail 使我们能够分配 IP 地址、配置自定义软件安装以及对每个 jail 进行修改。chroot开创了进程隔离的思想，但FreeBSD Jails才是真正实现了进程的沙箱化。
 2004 年，我们看到了 Solaris 容器的发布，它通过使用 Solaris Zones 创建了完整的应用程序环境。使用区域，您可以为应用程序提供完整的用户、进程和文件系统空间，以及对系统硬件的访问权限。但是，该应用程序只能看到它自己区域内的内容。2006 年，Google 的工程师宣布他们推出了用于隔离和限制进程资源使用的进程容器。 2007 年，这些容器被重命名为控制组 (cgroups)，并集成到了Linux内核。
 2008 年，通过将 Cgroups 的资源管理能力和 Linux Namespace 的视图隔离能力组合在一起， LXC（Linux Container） 这样的完整的容器技术出现在了 Linux 内核当中。它是第一个完善的容器管理方案，你可以通过 LXC 来创建和启动容器了。 LXC 跟之前出现的沙盒技术非常类似，但其赶上了 Linux 大规模商用的浪潮。伴随着公有云市场的崛起，很快催生了一个全新的、名为 PaaS 的产业。</description>
    </item>
    
    <item>
      <title>4.1.2 kubernetes容器化运行时发展</title>
      <link>https://william-lbn.github.io/kubernetes/docs/%E7%AC%AC%E5%9B%9B%E7%AB%A0-kubernetes-kubelet%E5%BC%80%E5%8F%91/4.1-%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8E%A5%E5%8F%A3cri/kubernetes%E5%AE%B9%E5%99%A8%E5%8C%96%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%91%E5%B1%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://william-lbn.github.io/kubernetes/docs/%E7%AC%AC%E5%9B%9B%E7%AB%A0-kubernetes-kubelet%E5%BC%80%E5%8F%91/4.1-%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8E%A5%E5%8F%A3cri/kubernetes%E5%AE%B9%E5%99%A8%E5%8C%96%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%91%E5%B1%95/</guid>
      <description>Docker的诞生和容器镜像的引入，使得软件制作变得异常容易；它解决了软件通过什么样的方式进行交互问题。然而仅仅是只有容器并不能产生很大的价值，就像集装箱一样，本身就是个大铁盒子，它没有太多价值，单单靠它提高不了社会协作的效能。它只有流动起来，才会产生价值，把货物从一个车间运到另一个车间，这种连接才是其价值所在。容器也一样，本身没有太多商业价值，你弄得再完美，你也只能在一个服务器上折腾，翻不出多大的浪花，那怎么样才能产生价值呢？
那就是真正价值所在——容器编排！
在既有硬件资源的基础上，启动容器不需要关注具体运行的节点，各个容器之间仍能保持通信，信息在容器之间依然可以流动。这样就拥有了商业价值，容器技术便可以付诸商用，整个软件的开发交付流程就会变得高效和颠覆。所以我们需要的是一个分布式的调度器，其主要功能就是容器编排。
Docker公司也深知这一点， 2015 年 Swarm 进入编排领域；但是在2014年6月Google发布了kubernetes，它源于内部的Borg项目，后经Go语言重写后开源。Kubernetes 希腊语意思是“舵手”，致力于管理数以万计的容器集群。你看舵手不正是隐喻了方向和流动么。因其开头字母和结尾字母之间共有 8 个字，所以简短的称其为k8s。
2014 年 k8s 开源之后，同年底 Docker 就设计了 machine+swarm+compose 的组合方案。2015 年 7 月 k8s 发布了第一个商用版本 1.0 ，同一年 Docker 的 Swarm 发布，编排大战已经开始上演了。
2016 年 2 月 Docker 发布了 1.12 版本，它不顾众怒，将 Swarm 强行内置到 Docker 的容器引擎里面，企图利用 Docker 项目在容器领域的领导地位推动 Swarm 的发展。这有点像什么？举个不恰当的例子，我订购了一个集装箱，你却附赠了一个不太好用的货轮。这一下一石惊起千层浪，业界都纷纷谴责 Docker 。同年的 7 月 Apache mesos 发布了 1.0 ，也是一个容器编排框架，至此，Kubernetes、Docker Swarm 和 Apache Mesos 已成三足鼎立之势。
然而，2017 年 9 月，Mesosphere 宣布支持 Kubernetes，这也是迫于用户压力，在对抗和妥协面前，不得不选择后者。
2017 年 10 月，在欧洲的 DockerCon 大会上，Docker 公司 CTO Solomon Hykes 宣布，Docker 的下个版本将支持 Kubernetes，台下观众响起热烈掌声，因为这是容器圈等待已久的消息。</description>
    </item>
    
    <item>
      <title>4.1.3 容器运行时接口详解</title>
      <link>https://william-lbn.github.io/kubernetes/docs/%E7%AC%AC%E5%9B%9B%E7%AB%A0-kubernetes-kubelet%E5%BC%80%E5%8F%91/4.1-%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8E%A5%E5%8F%A3cri/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8E%A5%E5%8F%A3%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://william-lbn.github.io/kubernetes/docs/%E7%AC%AC%E5%9B%9B%E7%AB%A0-kubernetes-kubelet%E5%BC%80%E5%8F%91/4.1-%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8E%A5%E5%8F%A3cri/%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8E%A5%E5%8F%A3%E8%AF%A6%E8%A7%A3/</guid>
      <description>什么是CRI #  CRI是Kubelet（负责管理容器生命周期的服务）与容器引擎之间的接口。为了适应多种不同的容器引擎，Kubelet在加入rkt的时候就已经在docker API的基础上抽象了一个Runtime接口，只是由于一些特定的缺陷，在这个接口上不太容易引入其他新的容器引擎：
Runtime接口的抽象度太高，导致一些原本该在Kubelet控制的逻辑被放到了Runtime实现里面。比如在当前的实现中，rkt和docker的SyncPod（负责Pod创建的接口）存在大量重复的逻辑，每次修改docker部分的时，都有可能需要同时修改rkt部分。这样，如果再加入新的容器引擎的话，同时修改多个Runtime部分的代码是没法维护的。 Runtime接口是集成在Kubelet内部的，集成容器引擎相关的代码需要放到Kubernetes代码库里面，这同样带来了维护的问题：代码维护麻烦，任何一个容器引擎修改了代码都需要发布新的kubelet；集成测试麻烦，要为每个不同的容器引擎部署不同的集成测试环境。 没有提供容器创建的接口，无法直接在Kubelet里面做到对容器的精细控制。 耦合了镜像和容器管理，而它们的生命周期本来就是独立的。 既然Runtime接口有很多问题，并且有很多容器引擎想要集成到Kubernetes中，所以有必要重新定义CRI，并且提供一种插件机制，允许容器引擎以外部独立进程的方式接入。所以，Brendan Burns在Hyper集成的时候就提供了一种以客户端/服务器方式接入外部容器引擎的思路。在大量的社区讨论后，Node team重新抽象了容器引擎接口（也就是CRI），并决定以gRPC的方式接入外部容器引擎。
CRI是如何工作的 #  CRI比Runtime接口提供了更细粒度的抽象，解耦了镜像管理和容器管理，并为Pod和Container提供了独立的操作接口。CRI以gRPC的方式接入，Kubelet是gPRC API的客户端，而容器引擎则是gRPC API的服务端。gRPC已经自动实现了它们之间交互的细节，容器引擎只需要实现每个具体的API。
参考： https://feisky.xyz/posts/2016-09-25-kubernetes-container-runtime-interface/</description>
    </item>
    
    <item>
      <title>4.1.4 开源社区现状</title>
      <link>https://william-lbn.github.io/kubernetes/docs/%E7%AC%AC%E5%9B%9B%E7%AB%A0-kubernetes-kubelet%E5%BC%80%E5%8F%91/4.1-%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8E%A5%E5%8F%A3cri/%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E7%8E%B0%E7%8A%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://william-lbn.github.io/kubernetes/docs/%E7%AC%AC%E5%9B%9B%E7%AB%A0-kubernetes-kubelet%E5%BC%80%E5%8F%91/4.1-%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8E%A5%E5%8F%A3cri/%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E7%8E%B0%E7%8A%B6/</guid>
      <description>Introduction #  </description>
    </item>
    
    <item>
      <title>4.1.5 CRI接口实战</title>
      <link>https://william-lbn.github.io/kubernetes/docs/%E7%AC%AC%E5%9B%9B%E7%AB%A0-kubernetes-kubelet%E5%BC%80%E5%8F%91/4.1-%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8E%A5%E5%8F%A3cri/cri%E6%8E%A5%E5%8F%A3%E5%AE%9E%E6%88%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://william-lbn.github.io/kubernetes/docs/%E7%AC%AC%E5%9B%9B%E7%AB%A0-kubernetes-kubelet%E5%BC%80%E5%8F%91/4.1-%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8E%A5%E5%8F%A3cri/cri%E6%8E%A5%E5%8F%A3%E5%AE%9E%E6%88%98/</guid>
      <description>Introduction #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://william-lbn.github.io/kubernetes/docs/%E7%AC%AC%E4%B8%80%E7%AB%A0-kubernetes-%E7%AE%80%E4%BB%8B/1.2-kubernetes%E6%9E%B6%E6%9E%84/kubernetes%E6%9E%B6%E6%9E%84%E5%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://william-lbn.github.io/kubernetes/docs/%E7%AC%AC%E4%B8%80%E7%AB%A0-kubernetes-%E7%AE%80%E4%BB%8B/1.2-kubernetes%E6%9E%B6%E6%9E%84/kubernetes%E6%9E%B6%E6%9E%84%E5%9B%BE/</guid>
      <description>test #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://william-lbn.github.io/kubernetes/docs/%E7%AC%AC%E4%B8%80%E7%AB%A0-kubernetes-%E7%AE%80%E4%BB%8B/1.2-kubernetes%E6%9E%B6%E6%9E%84/kubernetes%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://william-lbn.github.io/kubernetes/docs/%E7%AC%AC%E4%B8%80%E7%AB%A0-kubernetes-%E7%AE%80%E4%BB%8B/1.2-kubernetes%E6%9E%B6%E6%9E%84/kubernetes%E7%BB%84%E4%BB%B6/</guid>
      <description>test #  </description>
    </item>
    
  </channel>
</rss>
